                     +--------------------------+
                     |         EE 461S          |
                     | PROJECT 2: USER PROGRAMS |
                     |      DESIGN DOCUMENT     |
                     +--------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Andrew Cary <acary@utexas.edu>
Rajkumar Sengottuvel <raj.sengo@utexas.edu>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.
>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

                           ARGUMENT PASSING
                           ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

We made no changes to a struct to implement argument passing.
We made the following changes in our implementation:

File: userprog/process.c:

- setup_stack(): We added two parameters, char **saveptr and const char *filename
- load(): We added one parameter, char **saveptr
- start_process() uses strtok_r and places a null pointer between the file name and arguments
- saveptr is a pointer to the beginning of the arguments and is used in setup_stack()

---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

In userprog/process.c function setup_stack():

We use two local variables (char **cont and char **argv) each with a size of 2.
Starting at the save pointer, we parse the command line with strtok_r and
reallocate cont and argv pointers in increments of 2 as needed to extract the all arguments.
After the entire command line is parsed, copy cont to argv in reverse order.
Then, we word-align the stack pointer (in multiples of 4 bytes).
Next, we push the array of pointers from argv onto the stack.
Then, push argc and a fake return address onto the stack.
Finally, we free argv and cont.

---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?

Pintos implements strtok_r() because strtok()maintains context
internally between successive calls that parse the same string.
This can lead to race conditions when a thread uses the last
token held by another thread.

                             SYSTEM CALLS
                             ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

We made changes to the following:

struct thread:
- struct list file_list: keeps track of file
- int fd: current file descriptor
- struct list child_list: list of the threadâ€™s child processes
- tid_t parent: thread ID of the parent of the thread
- struct child_process* cp: pointer to current running child process
- struct file* executable: used to deny writes to executables
- struct list lock_list: holds locks the thread holds

File: syscall.h:
struct child_process holds important information about child processes.

struct child_process {
  int pid;
  int load_status;
  int wait;
  int exit;
  int status;
  struct semaphore load_sema;
  struct semaphore exit_sema;
  struct list_elem elem;
};

struct process_file holds the current file and contains the file descriptor and contents.

struct process_file {
    struct file *file;
    int fd;
    struct list_elem elem;
};

struct lock file_system_lock is used to lock the critical section used in modifying files.

struct lock file_system_lock;

>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

File descriptors are unique within each process and are not inherited
by child processes. They do not refer to a file position.

If a file is opened more than once, either by the same or different
processes, each open returns a new file descriptor. File descriptors
are opened and closed independently by separate calls.

File descriptors refer to a non-negative integer handle or -1
if the file could not be opened. They are 2 bytes in size.

---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.

Check if the stack pointer is valid, for both reads and writes.
If valid, dereference the pointer and find system call to run.
Gather arguments used for system call.
Check if the buffer is valid and proceed with the system call if so.

>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

The wait system call calls process_wait().

process_wait() uses a while loop with the child process
exit variable as the sentinel. The wait system call unblocks
after it receives the child pid once it has finished executing.

>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

Breaking the code into functions helps us organize the code in
discrete chunks. This enables us to handle errors in specific blocks,
keeping separation of concerns within the implementation.

When an error is detected, we ensure that all temporarily allocated
resources (locks, buffers, etc.) are freed by calling the free method
implemented for each function before returning control.

---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

We track the status of loaded or not loaded in struct child_process.
After finding the pid, check if loaded.
Exit with error (-1) if not loaded.

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

When P waits for C, P will stop and wait for C to exit.
When C exits, its lock is released.

If P calls wait after C exits, P will have no child to wait for
so it will not wait.

When P terminates before C exits, P kills all of its children
including C. All of the children will be terminated and release their locks.

When P terminates after C exits, locks held by C are released.

---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

For access to user memory from the kernel,
we chose to use function decomposition for error catching.
This reduces the difficulty and is more simple than to implement
page fault memory handling.

Whenever a pointer is invalid, it will be caught by the page
fault interrupt handler. In the interrupt handler, the syscall
exit(-1) is called.

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

Every file descriptor is unique to each process, therefore,
there is no need to further account for race conditions.

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?

We made no changes to the default tid_t to pid_t mapping.

                           SURVEY QUESTIONS
                           ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want -- these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the semester.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
